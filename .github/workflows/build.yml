name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Clear NuGet Cache
      run: |
        dotnet nuget locals all --clear
        
    - name: Configure NuGet
      run: |
        dotnet nuget list source
        dotnet nuget remove source nuget.org || echo "Source not found"
        dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org || echo "Source already exists"
        
    - name: Restore dependencies
      run: |
        dotnet restore --force --source https://api.nuget.org/v3/index.json
      
    - name: Build
      run: |
        dotnet build --configuration Release --no-restore /p:TreatWarningsAsErrors=false
      
    - name: Test ChromeDriver
      run: |
        $driverPath = "bin\Release\net6.0-windows\chromedriver.exe"
        Write-Host "检查 ChromeDriver 是否存在: $driverPath"
        if (Test-Path $driverPath) {
          Write-Host "ChromeDriver 文件存在"
          $version = (Get-Item $driverPath).VersionInfo.FileVersion
          Write-Host "ChromeDriver 版本: $version"
          
          # 尝试启动 ChromeDriver
          try {
            $process = Start-Process -FilePath $driverPath -ArgumentList "--version" -NoNewWindow -PassThru -Wait
            if ($process.ExitCode -eq 0) {
              Write-Host "ChromeDriver 启动测试成功"
            } else {
              Write-Error "ChromeDriver 启动测试失败"
              exit 1
            }
          } catch {
            Write-Error "ChromeDriver 启动失败: $_"
            exit 1
          }
        } else {
          Write-Error "ChromeDriver 文件不存在"
          exit 1
        }

    - name: Test Login Module
      run: |
        Write-Host "开始测试登录模块..."
        
        # 测试手机号码输入
        Write-Host "测试手机号码输入功能"
        $testPhones = @(
          "+1234567890",
          "+861234567890",
          "12345678901"
        )
        
        foreach ($phone in $testPhones) {
          Write-Host "测试手机号: $phone"
          try {
            # 检查 InputSimulator 是否正常工作
            $testFile = "phone_input_test.txt"
            Set-Content -Path $testFile -Value ""
            $process = Start-Process -FilePath "notepad.exe" -ArgumentList $testFile -PassThru
            Start-Sleep -Seconds 1
            
            # 模拟输入
            Add-Type -AssemblyName System.Windows.Forms
            [System.Windows.Forms.SendKeys]::SendWait($phone)
            Start-Sleep -Seconds 1
            
            # 检查结果
            $content = Get-Content -Path $testFile
            if ($content -eq $phone) {
              Write-Host "手机号输入测试成功: $phone"
            } else {
              Write-Host "手机号输入测试失败: $phone"
            }
            
            # 清理
            Stop-Process -Id $process.Id -Force
            Remove-Item $testFile
          } catch {
            Write-Error "手机号输入测试失败: $_"
          }
        }
        
        # 测试验证码输入
        Write-Host "测试验证码输入功能"
        $testCodes = @(
          "123456",
          "000000",
          "999999"
        )
        
        foreach ($code in $testCodes) {
          Write-Host "测试验证码: $code"
          try {
            $testFile = "code_input_test.txt"
            Set-Content -Path $testFile -Value ""
            $process = Start-Process -FilePath "notepad.exe" -ArgumentList $testFile -PassThru
            Start-Sleep -Seconds 1
            
            # 模拟输入
            Add-Type -AssemblyName System.Windows.Forms
            [System.Windows.Forms.SendKeys]::SendWait($code)
            Start-Sleep -Seconds 1
            
            # 检查结果
            $content = Get-Content -Path $testFile
            if ($content -eq $code) {
              Write-Host "验证码输入测试成功: $code"
            } else {
              Write-Host "验证码输入测试失败: $code"
            }
            
            # 清理
            Stop-Process -Id $process.Id -Force
            Remove-Item $testFile
          } catch {
            Write-Error "验证码输入测试失败: $_"
          }
        }
        
        Write-Host "登录模块测试完成"
      
    - name: Test
      run: dotnet test --no-build --verbosity normal
      
    - name: Publish
      if: startsWith(github.ref, 'refs/tags/')
      run: dotnet publish -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true
      
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          bin/Release/net6.0-windows/win-x64/publish/TelegramAutomation.exe
          LICENSE
          README.md
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}